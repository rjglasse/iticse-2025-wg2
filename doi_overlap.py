"""
DOI Overlap Analyzer

This tool compares DOIs from a reference list with DOIs found in BibTeX files to identify 
overlaps and gaps in bibliographic coverage. It calculates coverage statistics and identifies 
missing papers for literature reviews and bibliography validation.

Key Features:
- Extracts DOIs from plain text files and BibTeX entries
- Handles various DOI formats (with/without URL prefixes)
- Calculates overlap percentages and coverage statistics
- Identifies missing DOIs that need to be added
- Provides detailed verbose output for investigation
- Console summary with detailed listings

Usage Examples:
    # Basic overlap analysis
    python doi_overlap.py -d target_dois.txt -b my_bibliography.bib

    # Detailed analysis with missing DOI list
    python doi_overlap.py -d important_papers.txt -b conference.bib -v

    # Check literature review coverage
    python doi_overlap.py -d systematic_review_dois.txt -b collected_papers.bib -v

Requirements:
    - Python packages: bibtexparser
    - Two input files: DOI list (txt) and BibTeX file

Author: Designed by Ric Glassey. Generated by Claude Sonnet 4 for ITiCSE 2025 WG2 Systematic Literature Review
"""

import argparse
import re
import sys
from pathlib import Path
import bibtexparser

def extract_dois_from_file(file_path):
    """Extract DOIs from a text file (one DOI per line)."""
    dois = set()
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                # Strip whitespace and any potential URL prefixes
                line = line.strip()
                if line.startswith('https://doi.org/'):
                    line = line[16:]  # Remove the URL prefix
                if line:
                    dois.add(line)
    except Exception as e:
        print(f"Error reading DOI file {file_path}: {e}")
        sys.exit(1)
    
    return dois

def extract_dois_from_bibtex(bibtex_path):
    """Extract DOIs from a BibTeX file using bibtexparser."""
    bibtex_dois = set()
    try:
        with open(bibtex_path, 'r', encoding='utf-8', errors='ignore') as f:
            # Parse the BibTeX file using bibtexparser
            bib_database = bibtexparser.load(f)
        
        print(f"Found {len(bib_database.entries)} total BibTeX entries")
        
        # Extract DOIs from each entry
        for entry in bib_database.entries:
            if 'doi' in entry:
                doi = entry['doi'].strip()
                
                # Clean up DOI by removing common prefixes
                if doi.startswith('https://doi.org/'):
                    doi = doi[16:]
                elif doi.startswith('http://dx.doi.org/'):
                    doi = doi[18:]
                elif doi.startswith('dx.doi.org/'):
                    doi = doi[11:]
                
                if doi:  # Only add non-empty DOIs
                    bibtex_dois.add(doi)
        
        print(f"Found {len(bibtex_dois)} entries with valid DOI information")
        
    except Exception as e:
        print(f"Error reading BibTeX file {bibtex_path}: {e}")
        sys.exit(1)
    
    return bibtex_dois

def main():
    parser = argparse.ArgumentParser(description='Find overlap between DOIs and a BibTeX file')
    parser.add_argument('-d', '--doi-file', required=True, help='File containing DOIs (one per line)')
    parser.add_argument('-b', '--bibtex', required=True, help='BibTeX file to check for DOIs')
    parser.add_argument('-v', '--verbose', action='store_true', help='Show detailed output')
    args = parser.parse_args()
    
    # Extract DOIs from both files
    doi_list = extract_dois_from_file(args.doi_file)
    bibtex_dois = extract_dois_from_bibtex(args.bibtex)
    
    if not doi_list:
        print(f"No DOIs found in {args.doi_file}")
        sys.exit(1)
    
    if not bibtex_dois:
        print(f"No DOIs found in BibTeX file {args.bibtex}")
        sys.exit(1)
    
    # Find the overlap
    overlapping_dois = doi_list.intersection(bibtex_dois)
    missing_dois = doi_list - bibtex_dois
    
    # Calculate percentage
    overlap_percentage = (len(overlapping_dois) / len(doi_list)) * 100
    
    # Print results
    print(f"\nResults Summary:")
    print(f"----------------")
    print(f"DOIs in input file: {len(doi_list)}")
    print(f"DOIs in BibTeX file: {len(bibtex_dois)}")
    print(f"Overlapping DOIs: {len(overlapping_dois)} ({overlap_percentage:.1f}%)")
    print(f"Missing DOIs: {len(missing_dois)} ({100-overlap_percentage:.1f}%)")
    
    if args.verbose:
        if overlapping_dois:
            print("\nDOIs found in BibTeX:")
            print("---------------------")
            for doi in sorted(overlapping_dois):
                print(f"{doi}")
        
        if missing_dois:
            print("\nDOIs missing from BibTeX:")
            print("------------------------")
            for doi in sorted(missing_dois):
                print(f"{doi}")
    
if __name__ == "__main__":
    main()