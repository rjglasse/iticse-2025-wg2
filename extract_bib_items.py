"""
BibTeX DOI Extractor

This tool extracts specific BibTeX entries from a larger BibTeX file based on a list of DOIs.
It reads a list of DOIs from a text file and outputs a new BibTeX file containing only the 
matching entries.

Key Features:
- Reads DOIs from a text file (one DOI per line)
- Searches through large BibTeX files efficiently
- Handles various DOI formats (with/without prefixes)
- Preserves original BibTeX formatting
- Reports matching statistics
- Handles missing DOIs gracefully

Usage Examples:
    # Basic extraction
    python extract_bib_items.py -d dois.txt -f papers.bib -o filtered_papers.bib

    # With verbose output
    python extract_bib_items.py -d dois.txt -f papers.bib -o filtered_papers.bib -v

Requirements:
    - Python packages: bibtexparser
    - DOI list file (one DOI per line)
    - BibTeX source file

Author: Designed by Ric Glassey. Generated by GitHub Copilot for ITiCSE 2025 WG2 Systematic Literature Review
"""

import argparse
import os
import bibtexparser
from bibtexparser.bwriter import BibTexWriter

def load_dois_from_file(dois_file):
    """Load DOIs from a text file (one DOI per line)."""
    dois = set()
    try:
        with open(dois_file, 'r', encoding='utf-8') as f:
            for line in f:
                doi = line.strip()
                if doi:
                    # Clean up DOI by removing common prefixes
                    if doi.startswith('https://doi.org/'):
                        doi = doi[16:]
                    elif doi.startswith('http://dx.doi.org/'):
                        doi = doi[18:]
                    elif doi.startswith('dx.doi.org/'):
                        doi = doi[11:]
                    dois.add(doi.lower())  # Store in lowercase for matching
        print(f"Loaded {len(dois)} DOIs from file: {dois_file}")
        return dois
    except Exception as e:
        print(f"Error reading DOI file {dois_file}: {e}")
        return set()

def clean_doi(doi):
    """Clean and normalize a DOI for comparison."""
    if not doi:
        return ""
    
    doi = doi.strip()
    # Remove common prefixes
    if doi.startswith('https://doi.org/'):
        doi = doi[16:]
    elif doi.startswith('http://dx.doi.org/'):
        doi = doi[18:]
    elif doi.startswith('dx.doi.org/'):
        doi = doi[11:]
    
    return doi.lower()

def extract_entries_by_dois(bibtex_file, target_dois, verbose=False):
    """Extract BibTeX entries that match the target DOIs."""
    matching_entries = []
    found_dois = set()
    
    try:
        with open(bibtex_file, 'r', encoding='utf-8', errors='ignore') as f:
            bib_database = bibtexparser.load(f)
        
        print(f"Loaded {len(bib_database.entries)} entries from BibTeX file")
        
        for entry in bib_database.entries:
            if 'doi' in entry:
                entry_doi = clean_doi(entry['doi'])
                
                if entry_doi in target_dois:
                    matching_entries.append(entry)
                    found_dois.add(entry_doi)
                    
                    if verbose:
                        title = entry.get('title', 'No title')
                        print(f"Found: {entry_doi} - {title}")
        
        print(f"Found {len(matching_entries)} matching entries out of {len(target_dois)} requested DOIs")
        
        # Report missing DOIs
        missing_dois = target_dois - found_dois
        if missing_dois:
            print(f"Missing {len(missing_dois)} DOIs from BibTeX file")
            if verbose:
                print("Missing DOIs:")
                for doi in sorted(missing_dois):
                    print(f"  {doi}")
        
        return matching_entries
        
    except Exception as e:
        print(f"Error reading BibTeX file {bibtex_file}: {e}")
        return []

def write_bibtex_file(entries, output_file):
    """Write BibTeX entries to a file."""
    try:
        # Create a new database with the filtered entries
        new_db = bibtexparser.bibdatabase.BibDatabase()
        new_db.entries = entries
        
        # Write to file
        writer = BibTexWriter()
        writer.indent = '  '  # Two spaces for indentation
        writer.align_values = True
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(writer.write(new_db))
        
        print(f"Successfully wrote {len(entries)} entries to {output_file}")
        
    except Exception as e:
        print(f"Error writing to file {output_file}: {e}")

def main():
    parser = argparse.ArgumentParser(description='Extract BibTeX entries by DOI list')
    parser.add_argument('-d', '--doi-file', required=True, 
                       help='Text file containing DOIs (one per line)')
    parser.add_argument('-f', '--bibtex-file', required=True, 
                       help='Source BibTeX file to search')
    parser.add_argument('-o', '--output', required=True, 
                       help='Output BibTeX file for matching entries')
    parser.add_argument('-v', '--verbose', action='store_true', 
                       help='Show detailed progress and missing DOIs')
    
    args = parser.parse_args()
    
    # Check if input files exist
    if not os.path.exists(args.doi_file):
        print(f"Error: DOI file '{args.doi_file}' not found.")
        return
    
    if not os.path.exists(args.bibtex_file):
        print(f"Error: BibTeX file '{args.bibtex_file}' not found.")
        return
    
    # Load DOIs from file
    target_dois = load_dois_from_file(args.doi_file)
    if not target_dois:
        print("No valid DOIs found in DOI file.")
        return
    
    # Extract matching entries
    matching_entries = extract_entries_by_dois(args.bibtex_file, target_dois, args.verbose)
    
    if not matching_entries:
        print("No matching entries found.")
        return
    
    # Write results to output file
    write_bibtex_file(matching_entries, args.output)

if __name__ == "__main__":
    main()